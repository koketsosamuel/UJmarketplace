{"remainingRequest":"C:\\Users\\User\\Desktop\\UJmarketplace\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\UJmarketplace\\src\\components\\auth\\resetPwd.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\UJmarketplace\\src\\components\\auth\\resetPwd.vue","mtime":1589903206384},{"path":"C:\\Users\\User\\Desktop\\UJmarketplace\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\UJmarketplace\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\UJmarketplace\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\UJmarketplace\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport random from \"../ads/recentAds\"\n\nexport default {\n\n  name: \"pwdReset\",\n\n  data() {\n\n    return {\n\n      pwd: null,\n      pwd2: null\n\n    }\n\n  },\n\n  components: {\n    random\n  },\n\n  methods: {\n\n    reset() {\n\n      \n\n      if(this.pwd != this.pwd2) {\n        this.$toasted.error(\"Passwords do not match\", {icon: \"times-circle\"})\n      } else if(this.pwd == null || this.pwd == \"\") {\n        this.$toasted.error(\"Enter password\", {icon: \"times-circle\"})\n      } else {\n\n        let loader = this.$loading.show()\n\n        this.$axios.post(\"/user/reset/\"+this.$route.params.token, {\n          pwd: this.pwd\n        }).then(res => {\n\n          if(res.data.error) {\n            this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n          } else {\n            this.$toasted.success(res.data.message, {icon: \"check\"})\n            this.$router.replace(\"/login\")\n          }\n\n          loader.hide()\n\n        }).catch(err => {\n          this.$toasted.error(err, {icon: \"times-circle\"})\n          loader.hide()\n        })\n\n      }\n\n    }\n\n  }\n\n}\n",{"version":3,"sources":["resetPwd.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA","file":"resetPwd.vue","sourceRoot":"src/components/auth","sourcesContent":["<template>\n  <div>\n    <div class=\"container p-2 mt-2 purple mb-4 white-text\">\n\n      <h2>\n        <i class=\"fa fa-lock d-inline\"></i> Reset Password\n      </h2>\n\n      <!-- PWD -->\n      <div class=\"form-group\">\n        <label for=\"pwd\" ><i class=\"fa fa-lock\" aria-hidden=\"true\"></i> Password</label>\n        <input v-model=\"pwd\" type=\"password\" id=\"pwd\" class=\"form-control\" placeholder=\"e.g 212002355\" aria-describedby=\"helpName\">\n      </div>\n\n      <div class=\"form-group\">\n        <label for=\"pwd2\"><i class=\"fa fa-lock\" aria-hidden=\"true\"></i> Confirm Password</label>\n        <input v-model=\"pwd2\" type=\"password\" id=\"pwd2\" class=\"form-control\" placeholder=\"e.g 212002355\" aria-describedby=\"helpName\">\n      </div>\n\n      <button class=\"btn orange darken-4\" @click=\"reset()\">\n        Reset\n      </button>\n\n    </div>\n\n    <div>\n      <random />\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport random from \"../ads/recentAds\"\n\nexport default {\n\n  name: \"pwdReset\",\n\n  data() {\n\n    return {\n\n      pwd: null,\n      pwd2: null\n\n    }\n\n  },\n\n  components: {\n    random\n  },\n\n  methods: {\n\n    reset() {\n\n      \n\n      if(this.pwd != this.pwd2) {\n        this.$toasted.error(\"Passwords do not match\", {icon: \"times-circle\"})\n      } else if(this.pwd == null || this.pwd == \"\") {\n        this.$toasted.error(\"Enter password\", {icon: \"times-circle\"})\n      } else {\n\n        let loader = this.$loading.show()\n\n        this.$axios.post(\"/user/reset/\"+this.$route.params.token, {\n          pwd: this.pwd\n        }).then(res => {\n\n          if(res.data.error) {\n            this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n          } else {\n            this.$toasted.success(res.data.message, {icon: \"check\"})\n            this.$router.replace(\"/login\")\n          }\n\n          loader.hide()\n\n        }).catch(err => {\n          this.$toasted.error(err, {icon: \"times-circle\"})\n          loader.hide()\n        })\n\n      }\n\n    }\n\n  }\n\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}