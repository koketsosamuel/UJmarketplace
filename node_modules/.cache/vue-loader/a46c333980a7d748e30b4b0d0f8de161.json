{"remainingRequest":"C:\\Users\\User\\Desktop\\UJmart\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\UJmart\\src\\components\\admin\\adminNotifications.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\UJmart\\src\\components\\admin\\adminNotifications.vue","mtime":1586433062725},{"path":"C:\\Users\\User\\Desktop\\UJmart\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\UJmart\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\UJmart\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\UJmart\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {mapGetters, mapActions} from 'vuex'\n\n\nexport default {\n\n  name: \"adminCampuses\",\n  data() {\n    return {\n      notification: {\n        title: '',\n        link: '',\n        image: '',\n        _id: ''\n      }\n    }\n  },\n  methods: {\n    ...mapActions(['getNotifications']),\n\n    setEditData(not) {\n      this.notification = not\n    },\n\n    update() {\n      \n      let loader = this.$loading.show()\n\n      this.$axios.put(`/notification/update/${this.notification._id}`, this.notification)\n        .then(res => {\n          \n          if(res.data.error) {\n            this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n          } else {\n            this.$toasted.success(res.data.message, {icon: \"check\"})\n            this.getNotifications()\n          }\n\n          loader.hide()          \n\n        }).catch(err => {\n\n          this.$toasted.error(err, {icon:\"times-circle\"})\n          loader.hide()\n\n        })\n\n    },\n\n    remove(id) {\n\n      if(confirm(\"Are you sure you want to remove this notification?\")) {\n        let loader = this.$loading.show()\n\n        this.$axios.delete(`/notification/remove/${id}`, this.$headers())\n          .then(res => {\n            \n            if(res.data.error) {\n              this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n            } else {\n              \n              this.$toasted.success(res.data.message, {icon: \"check\"})\n              this.notification.title = ''\n              this.notification.shortDesc = ''\n              this.notification.notification = ''\n              this.notification.id = ''\n              this.getNotifications()\n\n            }\n\n            loader.hide()\n\n          })\n            .catch(err => {\n              \n              this.$toasted.error(err, {icon: \"times-circle\"})\n              loader.hide()\n\n            })\n      }\n    },\n\n    update() {\n      \n      let loader = this.$loading.show()\n\n      this.$axios.put(`/notification/update/${this.notification._id}`, this.notification, this.$headers())\n        .then(res => {\n          if(res.data.error) {\n            this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n          } else {\n            this.$toasted.success(res.data.message, {icon: \"check\"})           \n            this.getNotifications()\n          }\n\n          loader.hide()\n\n        }).catch(err => {\n          loader.hide()\n          this.$toasted.error(err, {icon: \"times-circle\"})\n        })\n\n    },\n\n    updateImage() {\n      \n      let loader = this.$loading.show()\n\n      let fd = new FormData()\n\n      fd.append(\"notificationImg\", this.$refs.notImg.files[0], this.$refs.notImg.files[0].name)\n\n      this.$axios.put(`/notification/update/image/${this.notification._id}`, fd, this.$headers())\n        .then(res => {\n          if(res.data.error) {\n            this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n          } else {\n            this.$toasted.success(res.data.message, {icon: \"check\"})\n            this.getNotifications()\n          }\n\n          loader.hide()\n\n        }).catch(err => {\n          loader.hide()\n          this.$toasted.error(err, {icon: \"times-circle\"})\n        })\n\n    }\n\n  },\n  computed: mapGetters(['notifications']),\n  created() {\n    this.getNotifications()\n  }\n\n\n}\n",{"version":3,"sources":["adminNotifications.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6EA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA","file":"adminNotifications.vue","sourceRoot":"src/components/admin","sourcesContent":["<template>\n  <div class=\"p-2 yellow lighten-2\">\n\n    <div class=\"collection mt-3\" v-if=\"notifications.length > 0\">\n      <a href=\"javascript:void(0)\" v-for=\"notification in notifications\" :key=\"notification._id\" class=\"collection-item black-text\" @click=\"setEditData(notification)\" >\n        <div> \n          <p class=\"left\">{{notification.title}} </p>\n\n          <span class=\"right\">\n            <div>\n              <a href=\"#notificationEdit\" class=\"btn modal-trigger blue\"><i class=\"fa fa-pen\"></i></a>\n              <a href=\"#notificationImage\" class=\"btn modal-trigger brown\"><i class=\"fa fa-image\"></i></a>\n              <a href=\"#\" class=\"btn red\" @click=\"remove(notification._id)\"><i class=\"fa fa-trash\"></i></a>\n            </div>\n          </span>\n\n          <div class=\"clearfix\"></div>\n\n        </div>\n      </a>\n    </div>\n\n\n    <!-- NOTIFICATIONS EDIT MODAL -->\n    <div id=\"notificationEdit\" class=\"modal teal\">\n      <div class=\"modal-content\">\n        <div>\n          <h5 class=\"white-text\">Edit notification</h5>\n          <p>Name</p>\n          <input type=\"text\" placeholder=\"Name\" v-model=\"notification.title\">\n          <p>Link</p>\n          <input type=\"text\" placeholder=\"Link\" v-model=\"notification.link\">\n\n        </div>\n      </div>\n      <div class=\"modal-footer orange darken-4\">\n        <a href=\"#!\" class=\"modal-close btn teal\" @click=\"update()\">Update</a>&nbsp;\n        <a href=\"#!\" class=\"modal-close btn white black-text\">Cancel</a>\n      </div>\n    </div>\n\n    <!-- NOTIFICATIONS IMAGE UPDATE -->\n    <div id=\"notificationImage\" class=\"modal teal\">\n      <div class=\"modal-content\">\n        <div>\n          \n          <h5 class=\"white-text\">Update Notification Image</h5>\n\n          <div class=\"notImg\">\n            <img :src=\"this.$baseUrl+notification.image\" alt=\"\">\n          </div>\n \n          <input type=\"file\" name=\"\" ref=\"notImg\">\n\n        </div>\n      </div>\n      <div class=\"modal-footer orange darken-4\">\n        <a href=\"#!\" class=\"modal-close btn teal\" @click=\"updateImage()\">Update</a>&nbsp;\n        <a href=\"#!\" class=\"modal-close btn white black-text\">Cancel</a>\n      </div>\n    </div>\n\n\n    <div v-if=\"notifications.length == 0\" class=\"purple p-2 mt-2\">\n      <p class=\"display-1 center  p-2 mt-2\">\n        <i class=\"fa fa-times-circle fa-4x\" aria-hidden=\"true\"></i>\n      </p>\n      <p class=\"center\">No Notifications</p>\n\n    </div>\n\n    \n\n  </div>\n</template>\n\n<script>\nimport {mapGetters, mapActions} from 'vuex'\n\n\nexport default {\n\n  name: \"adminCampuses\",\n  data() {\n    return {\n      notification: {\n        title: '',\n        link: '',\n        image: '',\n        _id: ''\n      }\n    }\n  },\n  methods: {\n    ...mapActions(['getNotifications']),\n\n    setEditData(not) {\n      this.notification = not\n    },\n\n    update() {\n      \n      let loader = this.$loading.show()\n\n      this.$axios.put(`/notification/update/${this.notification._id}`, this.notification)\n        .then(res => {\n          \n          if(res.data.error) {\n            this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n          } else {\n            this.$toasted.success(res.data.message, {icon: \"check\"})\n            this.getNotifications()\n          }\n\n          loader.hide()          \n\n        }).catch(err => {\n\n          this.$toasted.error(err, {icon:\"times-circle\"})\n          loader.hide()\n\n        })\n\n    },\n\n    remove(id) {\n\n      if(confirm(\"Are you sure you want to remove this notification?\")) {\n        let loader = this.$loading.show()\n\n        this.$axios.delete(`/notification/remove/${id}`, this.$headers())\n          .then(res => {\n            \n            if(res.data.error) {\n              this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n            } else {\n              \n              this.$toasted.success(res.data.message, {icon: \"check\"})\n              this.notification.title = ''\n              this.notification.shortDesc = ''\n              this.notification.notification = ''\n              this.notification.id = ''\n              this.getNotifications()\n\n            }\n\n            loader.hide()\n\n          })\n            .catch(err => {\n              \n              this.$toasted.error(err, {icon: \"times-circle\"})\n              loader.hide()\n\n            })\n      }\n    },\n\n    update() {\n      \n      let loader = this.$loading.show()\n\n      this.$axios.put(`/notification/update/${this.notification._id}`, this.notification, this.$headers())\n        .then(res => {\n          if(res.data.error) {\n            this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n          } else {\n            this.$toasted.success(res.data.message, {icon: \"check\"})           \n            this.getNotifications()\n          }\n\n          loader.hide()\n\n        }).catch(err => {\n          loader.hide()\n          this.$toasted.error(err, {icon: \"times-circle\"})\n        })\n\n    },\n\n    updateImage() {\n      \n      let loader = this.$loading.show()\n\n      let fd = new FormData()\n\n      fd.append(\"notificationImg\", this.$refs.notImg.files[0], this.$refs.notImg.files[0].name)\n\n      this.$axios.put(`/notification/update/image/${this.notification._id}`, fd, this.$headers())\n        .then(res => {\n          if(res.data.error) {\n            this.$toasted.error(res.data.message, {icon: \"times-circle\"})\n          } else {\n            this.$toasted.success(res.data.message, {icon: \"check\"})\n            this.getNotifications()\n          }\n\n          loader.hide()\n\n        }).catch(err => {\n          loader.hide()\n          this.$toasted.error(err, {icon: \"times-circle\"})\n        })\n\n    }\n\n  },\n  computed: mapGetters(['notifications']),\n  created() {\n    this.getNotifications()\n  }\n\n\n}\n</script>\n\n<style scoped>\n  .notImg {\n    max-height: 400px;\n    justify-content: center;\n    padding-top: 10px;\n  }\n\n  .notImg img {\n    max-height: 200px;\n    max-width: 100%;\n  }\n</style>\n"]}]}